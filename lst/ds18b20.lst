C51 COMPILER V9.01   DS18B20                                                               08/31/2018 22:40:51 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE DS18B20
OBJECT MODULE PLACED IN .\obj\ds18b20.obj
COMPILER INVOKED BY: E:\Keil_v5\C51\BIN\C51.EXE sensors\ds18b20.c BROWSE INCDIR(.\common;.\main;.\sensors) DEBUG OBJECTE
                    -XTEND PRINT(.\lst\ds18b20.lst) OBJECT(.\obj\ds18b20.obj)

line level    source

   1          #include "ds18b20.h"
   2          
   3          
   4          /*******************************************************************************
   5          * 函 数 名         : Ds18b20WriteByte
   6          * 函数功能                 : 向18B20写入一个字节
   7          * 输    入         : 无
   8          * 输    出         : 无
   9          *******************************************************************************/
  10          
  11          void Ds18b20WriteByte(unsigned char dat)
  12          {
  13   1              unsigned int i, j;
  14   1      
  15   1              for(j=0; j<8; j++)
  16   1              {
  17   2                      DSPort = 0;               //每写入一位数据之前先把总线拉低1us
  18   2                      i++;
  19   2                      DSPort = dat & 0x01;  //然后写入一个数据，从最低位开始
  20   2                      i=6;
  21   2                      while(i--); //延时68us，持续时间最少60us
  22   2                      DSPort = 1;     //然后释放总线，至少1us给总线恢复时间才能接着写入第二个数值
  23   2                      dat >>= 1;
  24   2              }
  25   1      }
  26          
  27          /*******************************************************************************
  28          * 函 数 名         : Ds18b20ReadByte
  29          * 函数功能                 : 读取一个字节
  30          * 输    入         : 无
  31          * 输    出         : 无
  32          *******************************************************************************/
  33          
  34          unsigned char Ds18b20ReadByte()
  35          {
  36   1              unsigned char byte, bi;
  37   1              unsigned int i, j;      
  38   1              for(j=8; j>0; j--)
  39   1              {
  40   2                      DSPort = 0;//先将总线拉低1us
  41   2                      i++;
  42   2                      DSPort = 1;//然后释放总线
  43   2                      i++;
  44   2                      i++;//延时6us等待数据稳定
  45   2                      bi = DSPort;     //读取数据，从最低位开始读取
  46   2                      /*将byte左移一位，然后与上右移7位后的bi，注意移动之后移掉那位补0。*/
  47   2                      byte = (byte >> 1) | (bi << 7);                                           
  48   2                      i = 4;          //读取完之后等待48us再接着读取下一个数
  49   2                      while(i--);
  50   2              }                               
  51   1              return byte;
  52   1      }
  53          
  54          
C51 COMPILER V9.01   DS18B20                                                               08/31/2018 22:40:51 PAGE 2   

  55          /********************************************************************************
  56          *读取主函数
  57          *
  58          *
  59          *
  60          ********************************************************************************/
  61          int Ds18b20Read()
  62          {
  63   1              int temp=0;
  64   1              float tp;
  65   1              unsigned char TMH,TML;
  66   1              /************开始初始化*****************************************************/
  67   1              unsigned char i=70;
  68   1              DSPort=0;//总线拉低480~960us
  69   1              while(i--);//每次延时10us
  70   1              while(DSPort)   //等待DS18B20拉低总线
  71   1              {
  72   2                      delay_ms(1);
  73   2                      i++;
  74   2                      if(i>5)//等待>5MS
  75   2                      {
  76   3                              return 0;//初始化失败
  77   3                      }
  78   2              
  79   2              }
  80   1              //Init finished
  81   1              /**********命令传感器进行温度转换*******************************************/
  82   1              delay_ms(100);//延迟10ms
  83   1              Ds18b20WriteByte(0xcc);         //跳过ROM操作命令                
  84   1              Ds18b20WriteByte(0x44);     //温度转换命令
  85   1              /************再次初始化*****************************************************/
  86   1              i=70;
  87   1              DSPort=0;//总线拉低480~960us
  88   1              while(i--);//每次延时10us
  89   1              while(DSPort)   //等待DS18B20拉低总线
  90   1              {
  91   2                      delay_ms(1);
  92   2                      i++;
  93   2                      if(i>5)//等待>5MS
  94   2                      {
  95   3                              D=!D;
  96   3                              return 0;//初始化失败
  97   3                      }
  98   2              
  99   2              }
 100   1              //Init finished
 101   1              delay_ms(100);
 102   1              Ds18b20WriteByte(0xcc);  //跳过ROM操作命令
 103   1              Ds18b20WriteByte(0xbe);  //发送读取温度命令
 104   1              //Don't delete
 105   1              TML = Ds18b20ReadByte();                //读取温度值共16位，先读低字节
 106   1              TMH = Ds18b20ReadByte();                //再读高字节
 107   1              temp = TMH;
 108   1              temp <<= 8;
 109   1              temp |= TML;
 110   1              //处理temp 
 111   1              if(temp< 0)                             //当温度值为负数
 112   1              {
 113   2                      //DisplayData[0] = 0x40;          //   -
 114   2                      //因为读取的温度是实际温度的补码，所以减1，再取反求出原码
 115   2                      temp=temp-1;
 116   2                      temp=~temp;
C51 COMPILER V9.01   DS18B20                                                               08/31/2018 22:40:51 PAGE 3   

 117   2                      tp=temp;
 118   2                      temp=tp*0.0625*100+0.5; 
 119   2                      //留两个小数点就*100，+0.5是四舍五入，因为C语言浮点数转换为整型的时候把小数点
 120   2                      //后面的数自动去掉，不管是否大于0.5，而+0.5之后大于0.5的就是进1了，小于0.5的就
 121   2                      //算加上0.5，还是在小数点后面。
 122   2       
 123   2              }
 124   1              else
 125   1              {                       
 126   2                      //DisplayData[0] = 0x00;
 127   2                      tp=temp;//因为数据处理有小数点所以将温度赋给一个浮点型变量
 128   2                      //如果温度是正的那么，那么正数的原码就是补码它本身
 129   2                      temp=tp*0.0625*100+0.5; 
 130   2                      //留两个小数点就*100，+0.5是四舍五入，因为C语言浮点数转换为整型的时候把小数点
 131   2                      //后面的数自动去掉，不管是否大于0.5，而+0.5之后大于0.5的就是进1了，小于0.5的就
 132   2                      //算加上0.5，还是在小数点后面。
 133   2              }
 134   1              return temp;
 135   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    329    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
